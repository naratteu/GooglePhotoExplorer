@using CasCap.Models
@using System.Collections.Concurrent
@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Threading.Tasks.Dataflow
@using Microsoft.AspNetCore.Components.WebView.WindowsForms;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.JSInterop
@using OpenQA.Selenium
@using OpenQA.Selenium.Edge

@inject CasCap.Services.GooglePhotosService gp
@inject IJSRuntime js

<h1>수집 페이지</h1>

<QueryView parent=this miList='miDic.Keys' />

<div style="position: sticky; bottom: 0; background-color: silver; overflow:hidden">
    @if (update_request is null)
    {
        <span>캐시데이터 로드중 입니다..</span>
    }
    else
    {
        <input @bind=update_count type=range min=1 max=1000 />
        <button @onclick='()=>Task.WhenAll(new object[update_count].Select(update_request.SendAsync))'>@update_count 개 업데이트</button>
        <button @onclick='()=>update_request.TryReceiveAll(out _)'>업데이트중지</button>
        <button @onclick='()=>File.WriteAllLinesAsync(cache, miDic.Values.Select(mi => JsonSerializer.Serialize(mi)))'>캐시정리</button>
        <br>
        <button @onclick='async ()=>await AppendDecs(await js.InvokeAsync<string>("prompt", ["추가할 내용을 입력하세요", "#"]), [..miDic.Values])'>@(miSelect.Count)개 아이템에 설명 추가</button>
        <button @onclick='() => Group = Groupping().ToArray()'>분류하기</button>
        foreach (var (n, g) in Group)
        {
            <button @onclick=open>@n</button>
            void open() => new BlazorForm<Rf>
            {
                Text = n,
                Size = new(800, 600),
                [c => c.rf] = rf =@<QueryView parent=this miList='[..g.Select(mi => mi.id)]' />,
            }.Show();
        }
    }
    <br>
    <span>@(new { login, cache_count = miDic.Count, updated_count, updated_all })</span>
</div>
@code {
    static RenderFragment rf { set { } }

    const string cache = "./cache.mi";
    MediaItem cache_add { set => File.AppendAllLines(cache, [JsonSerializer.Serialize(value)]); }

    ConcurrentDictionary<string, MediaItem> miDic = new(), miSelect = new();
    public MediaItem this[string id] => miDic[id];

    bool? login;
    BufferBlock<object?>? update_request;
    uint update_count = 10;
    uint updated_count = 0;
    bool updated_all = false;
    protected override async void OnInitialized()
    {
        await File.AppendAllLinesAsync(cache, []);
        await foreach (var line in File.ReadLinesAsync(cache))
            if (JsonSerializer.Deserialize<MediaItem>(line) is { } mi)
            {
                miDic[mi.id] = mi;
                StateHasChanged();
            }

        login = await gp.LoginAsync();
        update_request = new();
        StateHasChanged();

        _ = await update_request.ReceiveAsync();
        await foreach (var mi in gp.GetMediaItemsAsync())
        {
            cache_add = miDic[mi.id] = mi;
            updated_count++;
            StateHasChanged();
            _ = await update_request.ReceiveAsync();
        }
        updated_all = true;
    }

    public async Task Refresh(string id) => cache_add = miDic[id] = await gp.GetMediaItemByIdAsync(id) ?? throw new("No Data");

    async Task AppendDecs(string? text, MediaItem[] items)
    {
        if (string.IsNullOrWhiteSpace(text))
            return;

        using var cd = new EdgeDriver(@"Q:\OneDrive\SWHOME", options: new() { DebuggerAddress = "localhost:9223" });
        try
        {
            cd.SwitchTo().NewWindow(WindowType.Tab);

            foreach (var mi in items)
            {
                await Task.Delay(3000);
                cd.Url = mi.productUrl;
                await Task.Delay(3000);
            re: try
                { cd.FindElement(By.CssSelector("textarea[aria-label='설명']")).SendKeys(text + Keys.Escape); }
                catch
                { cd.FindElement(By.CssSelector("button[aria-label='정보 열기']")).Click(); goto re; }
                finally
                { await Task.Delay(3000); }
                await Refresh(mi.id);
                StateHasChanged();
            }
        }
        finally
        {
            cd.Quit();
        }
    }

    (string name, IEnumerable<MediaItem> list)[] Group = [];
    IEnumerable<(string name, IEnumerable<MediaItem> list)> Groupping()
    {
        var look_empty = miDic.Values.ToLookup(mi => string.IsNullOrWhiteSpace(mi.description));
        yield return ("empty", look_empty[true]);
        foreach (var look_tag in look_empty[false].ToLookup(mi => string.Concat(Regex.Matches(mi.description ?? "", @"#[\w]+").OrderBy(r => r.Value))))
            yield return look_tag switch
            {
                { Key: "" } => ("no tag", look_tag),
                _ => (look_tag.Key, look_tag),
            };
    }
}