@using CasCap.Models
@using System.Collections.Concurrent
@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Threading.Tasks.Dataflow
@using Microsoft.AspNetCore.Components.WebView.WindowsForms;
@using Microsoft.Extensions.DependencyInjection;

@inject CasCap.Services.GooglePhotosService gp
@inject Cache c

<h1>수집 페이지</h1>

<QueryView parent=this miList='miDic.Keys' />

<div style="position: sticky; bottom: 0; background-color: silver; overflow:hidden">
    @if (update_request is null)
    {
        <span>캐시데이터 로드중 입니다..</span>
    }
    else
    {
        <input @bind=update_count type=range min=1 max=1000 />
        <button @onclick='()=>Task.WhenAll(new object[update_count].Select(update_request.SendAsync))'>@update_count 개 업데이트</button>
        <button @onclick='()=>update_request.TryReceiveAll(out _)'>업데이트중지</button>
        <button @onclick='()=>File.WriteAllLinesAsync(cache, miDic.Values.Select(mi => JsonSerializer.Serialize(mi)))'>캐시정리</button>
        <br>
        <button @onclick='() => Group = Groupping().ToArray()'>분류하기</button>
        foreach (var (n, g) in Group)
        {
            <button @onclick=open>@n</button>
            void open() => new Rf.Form
            {
                Text = n,
                Size = new(800, 600),
                rf = @<QueryView parent=this miList='[..g.Select(mi => mi.id)]' />,
            }.Show();
        }
        <button @onclick=local>local</button>
        void local() => new Rf.Form
        {
            Text = "local",
            Size = new(800, 600),
            rf = @<LocalView parent=this />,
        }.Show();
        <label>local2<InputFile OnChange=local2 multiple /></label>
        async Task local2(InputFileChangeEventArgs args)
        {
            static async Task<Cache.LocalPhoto> Open(IBrowserFile file, Cache c)
            {
                await using var s = file.OpenReadStream(file.Size); //비동기읽기만 지원하여 복사필요
                await using MemoryStream ms = new();
                await s.CopyToAsync(ms);
                var arr = ms.ToArray();
                string? key = null;
                return await c.Get(() => new MemoryStream(arr), ref key);
            }
            switch (args.FileCount)
            {
                case > 1 and var cnt :
                    var files = args.GetMultipleFiles(cnt).Select(file =>
                    {
                        var lp = Open(file, c);
                        RenderFragment rf = @<TaskLoader Task=lp>
                            <Wait>loading..</Wait>
                            <Ok><LocalDiffItem parent=this lp=context /></Ok>
                            <Err>Err!</Err>
                        </TaskLoader>;
                        return (file, rf);
                    }).AsQueryable();
                    new Rf.Form
                    {
                        Text = "local files",
                        Size = new(800, 600),
                        rf = @<QuickGrid Items="files">
                            <PropertyColumn Property="f => f.file.Name" />
                            <TemplateColumn Title="render">@context.rf</TemplateColumn>
                            </QuickGrid>,
                    }.Show();
                    break;
                default:
                    var lp = await Open(args.File, c);
                    new Rf.Form
                    {
                        Text = "local",
                        Size = new(800, 600),
                        rf = @<LocalDiff parent=this lp=lp />,
                    }.Show();
                    break;
            }
        }
    }
    <br>
    <span>@(new { login, cache_count = miDic.Count, updated_count, updated_all })</span>
</div>
@code {
    const string cache = "./cache.mi";
    MediaItem cache_add { set => File.AppendAllLines(cache, [JsonSerializer.Serialize(value)]); }

    ConcurrentDictionary<string, MediaItem> miDic = new();
    public MediaItem this[string id] => miDic[id];
    public IEnumerable<MediaItem> Items => miDic.Values;

    bool? login;
    BufferBlock<object?>? update_request;
    uint update_count = 10;
    uint updated_count = 0;
    bool updated_all = false;
    protected override async void OnInitialized()
    {
        await File.AppendAllLinesAsync(cache, []);
        await foreach (var line in File.ReadLinesAsync(cache))
            if (JsonSerializer.Deserialize<MediaItem>(line) is { } mi)
            {
                miDic[mi.id] = mi;
                StateHasChanged();
            }

        update_request = new();
        StateHasChanged();

        _ = await update_request.ReceiveAsync();
        login = await gp.LoginAsync();
        StateHasChanged();
        await foreach (var mi in gp.GetMediaItemsAsync())
        {
            cache_add = miDic[mi.id] = mi;
            updated_count++;
            StateHasChanged();
            _ = await update_request.ReceiveAsync();
        }
        updated_all = true;
    }

    public async Task Reload(string id) => cache_add = miDic[id] = await gp.GetMediaItemByIdAsync(id) ?? throw new("No Data");

    (string name, IEnumerable<MediaItem> list)[] Group = [];
    IEnumerable<(string name, IEnumerable<MediaItem> list)> Groupping()
    {
        var look_empty = miDic.Values.ToLookup(mi => string.IsNullOrWhiteSpace(mi.description));
        yield return ("empty", look_empty[true]);
        foreach (var look_tag in look_empty[false].ToLookup(mi => string.Concat(Regex.Matches(mi.description ?? "", @"#[\w]+").OrderBy(r => r.Value))))
            yield return look_tag switch
            {
                { Key: "" } => ("no tag", look_tag),
                _ => (look_tag.Key, look_tag),
            };
    }
}