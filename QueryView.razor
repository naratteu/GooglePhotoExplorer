@using CasCap.Models
<table>
    <thead style="position: sticky; top: 0; background-color: silver">
        <tr>
            @if (miSelect.Count is 0)
            {
                <th @onclick='()=>miSelect.UnionWith(miList)'>선택</th>
            }
            else
            {
                <th @onclick='()=>miSelect.RemoveWhere(_ => true)'>@miSelect.Count/@miList.Count 개 선택됨</th>
            }
            <th><details><summary>Img</summary><dialog open><label><input type="range" @bind=size />@(size)px</label></dialog></details></th>
            <th>Description<button @onclick='()=>AppendDecs(miSelect)'>+</button></th>
            <th><button title="Refresh" @onclick='StateHasChanged'>↻</button></th>
        </tr>
    </thead>
    <tbody>
        <Virtualize Context=id Items=miList SpacerElement=tr ItemSize=(size+margin)>
            @{
                var ck = miSelect.Contains(id);
                var mi = parent[id];
            }
            <tr @key=id style='height: @(size+margin)px;@(ck ? "background-color:aquamarine;" : "")'>
                <td @onclick='()=>_ = ck ? miSelect.Remove(id) : miSelect.Add(id)'>@mi.filename</td>
                <td><a href="@mi.baseUrl"><img src='@(mi.baseUrl+$"=c-s{size}")'></a><a href="@mi.productUrl">↪</a></td>
                <td>@mi.description</td>
                <td><button title="Reload" @onclick='()=>parent.Reload(id)'>🗘</button></td>
            </tr>
        </Virtualize>
    </tbody>
</table>
@code
{
    [Parameter] public required GatherPage parent { get; init; }
    [Parameter] public required ICollection<string> miList { get; init; }
    HashSet<string> miSelect = new();

    uint size = 32;
    const int margin = 10;

    async Task AppendDecs(IEnumerable<string> ids)
    {
        var text = await js.InvokeAsync<string>("prompt", [$"선택한 {ids.Count()}개 사진에 추가할 내용을 입력하세요", "#"]);
        if (string.IsNullOrWhiteSpace(text))
            return;

        await Macro.Inst.AppendDecs(text, [.. ids.Select(id => parent[id])], async mi =>
        {
            await parent.Reload(mi.id);
            StateHasChanged();
        });
    }
}