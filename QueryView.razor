@using CasCap.Models

@inject Cache cache

<QuickGrid id="miList" Items=miList Virtualize="true">
    <TemplateColumn>
        <HeaderTemplate>
            <label>
                <input @bind=SelectAll type="checkbox" />
                @if (SelectAll)
                {
                    <text>모두 선택</text>
                }
                else
                {
                    <text>@miSelect.Count/@miList.Count() 개 선택됨</text>
                }
            </label>
        </HeaderTemplate>
        <ChildContent Context="mi"><label><input @bind=this[mi] type="checkbox" /> @mi.filename</label></ChildContent>
    </TemplateColumn>
    <TemplateColumn Context="mi">
        <HeaderTemplate><details><summary>Img</summary><dialog open><label><input type="range" @bind=size />@(size)px</label></dialog></details></HeaderTemplate>
        <ChildContent>
            <a href="@mi.baseUrl" class="preview">
                <TaskLoader @key=mi.id Task="cache.Get(mi)">
                    <Wait><img src='./Loading.png' /></Wait>
                    <Ok><img src=@(context.ImageHash.preview) style="aspect-ratio:@mi.mediaMetadata.width/@mi.mediaMetadata.height" />@PassedTime(context.CachedDate)</Ok>
                    <Err><img src='./Forbidden.png' /></Err>
                </TaskLoader>
            </a>
            <a href="@mi.productUrl">↪</a>
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Sortable="true" Property="mi => mi.description" />
    <TemplateColumn>
        <HeaderTemplate><button @onclick='()=>AppendDecs(miSelect)'>+</button></HeaderTemplate>
    </TemplateColumn>
    <TemplateColumn Context="mi">
        <HeaderTemplate><button title="Refresh" @onclick='() => { cache.ClearFault(); StateHasChanged(); }'>↻</button></HeaderTemplate>
        <ChildContent><button title="Reload" @onclick='()=>parent.Reload(mi.id)'>🗘</button></ChildContent>
    </TemplateColumn>
    <PropertyColumn Sortable="true" Property="mi => mi.mimeType"/>
    <PropertyColumn Sortable="true" Property="mi => mi.syncDate"/>
    <PropertyColumn Sortable="true" Property="mi => mi.mediaMetadata.creationTime"/>
</QuickGrid>

<style>
    #miList thead {
        position: sticky;
        top: 0;
        background-color: silver;
    }

    #miList tbody tr {
        height: @(size + margin)px;
    }

        #miList tbody tr:has(input:checked) {
            background-color: aquamarine;
        }

        #miList tbody tr .preview img {
            height: @(size)px;
        }
</style>

@code
{
    [Parameter] public required GatherPage parent { get; init; }
    [Parameter] public required IQueryable<MediaItem> miList { get; init; }
    readonly HashSet<MediaItem> miSelect = new();
    bool SelectAll
    {
        get => miSelect.Count == miList.Count();
        set { if (value) miSelect.UnionWith(miList); else miSelect.RemoveWhere(_ => true); }
    }
    bool this[MediaItem mi]
    {
        get => miSelect.Contains(mi);
        set => _ = value ? miSelect.Add(mi) : miSelect.Remove(mi);
    }

    uint size = 32;
    const int margin = 10;

    async Task AppendDecs(IEnumerable<MediaItem> mis)
    {
        var text = await js.InvokeAsync<string>("prompt", [$"선택한 {mis.Count()}개 사진에 추가할 내용을 입력하세요", "#"]);
        if (string.IsNullOrWhiteSpace(text))
            return;

        await Macro.Inst.AppendDecs(text, mis, async mi =>
        {
            await parent.Reload(mi.id);
            StateHasChanged();
        });
    }

    static string PassedTime(DateTime l)
    {
        var n = DateTime.Now;
        if (n.Year - l.Year is > 0 and var y) return $"{y:0}년 전";
        if (n.Month - l.Month is > 0 and var M) return $"{M:0}달 전";
        return (n - l) switch
        {
            { TotalDays: >= 1 and var d } => $"{d:0}일 전",
            { TotalHours: >= 1 and var h } => $"{h:0}시간 전",
            { TotalMinutes: >= 1 and var m } => $"{m:0}분 전",
            { TotalSeconds: > 0 and var s } => $"{s:0.#}초 전",
            _ => "-"
        };
    }
}